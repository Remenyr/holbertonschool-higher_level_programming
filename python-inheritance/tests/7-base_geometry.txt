Using ''integer_validator''
--------------------------------------------------
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> base = BaseGeometry()

>>> base.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

>>> base.integer_validator("age", 18)

>>> base.integer_validator("age", "eighteen")
Traceback (most recent call last):
...
TypeError: age must be an integer

>>> base.integer_validator("total", -1)
Traceback (most recent call last):
...
ValueError: total must be greater than 0

>>> base.integer_validator("empty")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> base.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> base.integer_validator("distance", 0)
Traceback (most recent call last):
...
ValueError: distance must be greater than 0

>>> base.integer_validator("distance", None)
Traceback (most recent call last):
...
TypeError: distance must be an integer

>>> base.integer_validator("number", [3])
Traceback (most recent call last):
...
TypeError: number must be an integer

>>> base.integer_validator("number", (1, 2))
Traceback (most recent call last):
...
TypeError: number must be an integer

>>> base.integer_validator("number", (1, 2))
Traceback (most recent call last):
...
TypeError: number must be an integer

>>> base.integer_validator("number", True)
Traceback (most recent call last):
...
TypeError: number must be an integer

>>> base.integer_validator("number", {1, 2})
Traceback (most recent call last):
...
TypeError: number must be an integer
